Assessment Tasks:

Task 1: Repeat User Input Until Valid Response
Problem: Write a program that repeatedly asks the user for a positive integer greater than zero. The loop should continue until the user provides a valid input. If the input is not valid (e.g., zero or a negative number), the program should prompt the user again.

Example:

Input: -5 (Invalid) → "Please enter a positive integer."
Input: 10 (Valid) → "Thank you! You entered: 10"
Explanation: In this task, the do-while loop will ensure that the prompt is displayed at least once before checking the validity of the user's input. It will keep running until the condition for valid input (positive integer) is satisfied.

Task 2: Reverse a Given String
Problem: Write a program that takes a string as input and then reverses it using a do-while loop. The loop should keep removing the last character of the string and appending it to a new string until the original string is empty.

Example:

Input: "hello"
Output: "olleh"
Explanation: Here, the do-while loop ensures that the string reversal process is repeated at least once, and each iteration of the loop removes one character from the original string and adds it to a new reversed string.

Task 3: Validate a Password
Problem: Write a program that validates a password input by the user. The program should repeatedly ask for a password until the user enters one that meets the following criteria:

At least 8 characters long
Contains at least one digit
Contains at least one special character (e.g., !, @, #, etc.)
Example:

Input: "pass123" (Invalid) → "Password must contain at least one special character."
Input: "Pass@123" (Valid) → "Password accepted."
Explanation: The do-while loop guarantees that the password prompt is displayed at least once. If the password is invalid, it will keep asking for a valid password until the user provides one that satisfies all the criteria.

Task 4: Number Guessing Game
Problem: Write a program for a simple number guessing game. The program generates a random number between 1 and 100 and asks the user to guess the number. The loop continues until the user guesses correctly, providing feedback if the guess is too high or too low.

Example:

Input: "50" → "Too high, try again!"
Input: "30" → "Correct! You guessed the number."
Explanation: A do-while loop is well-suited for this problem because it ensures that the user is asked to guess at least once. The loop will repeat until the correct guess is made, providing feedback in each iteration.

Task 5: Multiplication Table of a Number
Problem: Write a program that prints the multiplication table of a given number up to 10 using a do-while loop. The user should input the number, and the program will display the table.

Example:

Input: 3
Output:
python
Copy code
3 x 1 = 3
3 x 2 = 6
3 x 3 = 9
...
3 x 10 = 30
Explanation: The do-while loop ensures that the multiplication for each number from 1 to 10 is performed and displayed at least once. The loop condition checks if the counter is within the range of 1 to 10.